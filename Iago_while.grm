"Name"     = 'Grammar'
"Author"   = 'Iago Machado'
"Version"  = '1.0'

"Start Symbol" = <Start>
"Case Sensitive" = 'True'
                 

! ===================================================================
! Type Declaration
! ===================================================================

<Typedef Decl> ::= typedef <Base> Identifier ';'

<Base> ::= <Type>
        | struct Identifier 
        | struct '{' <Struct Def> '}'  

! ===================================================================
! Boolean
! ===================================================================

<Boolean Literal> ::= 'true'
                    | 'false'
                    

! ===================================================================
! Expressions
! ===================================================================

<Conditional Expression> ::= <Relational Expression>
              | <Logical Expression>
              | <Boolean Literal> 
              
<Call Expression> ::= <Function Call>
                   | <Procedure Call>
                   
! ===================================================================
! Statements
! ===================================================================
              
<Statement> ::= <Block> 
              | <Var>
              | <Const>
              | <Empty Statement>
              | <If>
              | <If Else>
              | <While>
              | <Print>
              | <Read>
              | <Return Statement>
              | <Call Expression>
              | <Assignment Expression>
              | <Arithmetic Expression>
              | <Expression>

<Block> ::= <Statement List>
        
<Statement List> ::= <Statement> <Statement List>
                   | 

<Return Statement> ::= 'return' ';'
                       | 'return' <Expression> ';'
                       
<Empty Statement> ::= ';'
                   
! ===================================================================
! While
! ===================================================================                   

<While> ::= 'while' '(' <Conditional Expression> ')' '{' <Statement> '}'
         

